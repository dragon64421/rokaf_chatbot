행정이 관리자를 위한 설명서

Version 1.1
2022.3.30
김영준
01051286093

#######################
목차
1. 개요
	1.1 챗봇 작동방식
2. 준비과정
	2.1. AWS 설정
	2.2 카카오채널 설정
3. 챗봇 실행법
4. 에러 해결법
5. 개선방향
#######################

1. 개요
개발이유 및 개요는 “행정이 개발개요.hwp” 참고
설명서를 작성하게된 이유는 생도대의 발전을 위해서 노력하려는 의지가 후배들에게도 계속해서 이어졌으면 하기 때문임
나는 능력이 부족해서 이정도 밖에 못했지만 후배들이라면 더 발전시킬 수 있을 것이라고 생각함
내가 바랬던 최종 목표는 전대단위의 모든 조사를 행정이를 통해서 수합할 수 있는 것이였음, 하지만 능력의 부족과 시간의 부2족으로 완성하지 못하였으니 부디 후배들이 이어서 완성해줬으면 하는 바램임

1.1 챗봇 작동방식
행정이는 카카오채널을 통해서 이뤄지는 서비스(?)임. 또한 24시간 교육용 노트북을 통해서 서버를 열어둘 수 없기 때문에 24시간 서버를 열어둘 클라우드 서버를 이용함. 지금은 1년간 무료로 사용할 수 있는 AWS를 사용하고 있지만 오라클 등 다른 서버를 사용해도 무방함.

행정이의 코드를 보면 굉장히 복잡하는 것을 알 수 있을 건데 이럴 수 밖에 없는 이유가 바로 (중요)“챗봇이 대화상대와의 이전 대화를 기억하지 못하기 때문”임. 예를 들어 사용자가 신청 중에 회식 메뉴를 보내면 챗봇은 답장으로 수량이 몇개냐고 물을거임. 그래서 사용자가 수량을 보내면 챗봇은 왜 그 숫자가 답으로 왔는지 기억하지 못함. 따라서 사용자가 지금 어떤 대화를 어디까지 하고 있는지를 저장하고 메시지가 올때마다 이를 갱신해야함.

##챗봇 구동과정의 간단한 설명
-메시지 도착(보낸사람과 메시지의 정보가 담겨있음)
-보낸 사람이 등록된 사람인지 확인
  -등록된 사람이 아니라면 등록 안내 메시지 전송
-(등록된 사람이면) 등록된 사람의 상태 확인 (*상태 = 어떤 대화를 하고 있었고 어디까지 했었는지, 또는 아무 대화도 안하던 상태)
-상태를 확인했을 때 지금 받은 메시지가 질문의 답이면 내용을 저장하고 다음 질문이 있다면 다음 질문을 전송. 신청하고자 하는 신청의 이름이면 해당 신청의 첫번째 질문 전송. 등등 상태를 확인하고 그에 맞는 행동 수행

상태(status)의 종류
0
1
신청이름.숫자 (ex. 2중대 bbq.2)

##관리자와 슈퍼관리자
챗봇의 무분별한 사용을 방지하고 혹시모를 개인정보 보호와 사용허가를 위해 사용자의 등급을 3단계로 구분하였음
0 - 일반 사용자
1 - 관리자: 신청을 생성/삭제 자신이 개설한 신청의 내용을 내려받을 권한이 있음(*다른 관리자가 개설한 신청의 수합 내용을 내려받을 수 없음)
2 - 슈퍼관리자: 관리자를 등록하거나 삭제할 수 있음. 모든 신청의 내용을 '마스터키' 명령어를 통해 내려받을 수 있음
등급 정보는 name_id.xlsx 파일에 0,1,2로 구분되어 있음
슈퍼관리자는 엑셀에서 직접 등급 정보를 2로 수정하는 것으로만 지정할 수 있음

##기타 참고사항
이메일로 보내는 기능은 웹메일로는 잘 보내지지 않거나 보내지는데 시간이 오래걸림
서버를 새로 열었을 경우 다운로드코드 명령어를 보냈을 때 답장으로 보낼 메시지에서 IP주소를 새 서버의 주소로 수정해야함


2. 준비과정

2. 1. AWS 설정
나는 AWS를 사용했지만 다른 클라우드서버를 사용해도 무방함. 대신 포트설정은 동일하게 해줘야함.
	1. AWS 계정생성
	AWS 계정을 생성해야하는데 이때 결제가능한 카드가 있어야함. 없으면 나한테 연락해.. 자세한 내용은 인터넷에 많음
	2. ec2 인스턴스를 생성해야함.
	t2.micro (무료라서)로 생성하면됨
	계속 다음 누르다가 바로 '검토 및 시작' 버튼이 나오면 누르지 말고 다음만 누르다가 6단계 보안 그룹 구성으로 가서 첨부된 스크린샷처럼 설정(포트 열어주는 과정)
	시작하기 누르면 키페어 생성이 나오는데, 새로운 키페어 생성 (.pem 파일) 잘 보관해두셈
	sftp 등의 방법으로 server 폴더를 폴더 통채로 ubuntu폴더에 복사 (~/home/ubuntu/server/kakao_server.py 순서가 되도록)
	Putty 등의 방법으로 서버로 SSH 접속 (이 과정에서 .pem파일이 필요함)
	파이썬은 기본으로 깔려있음, 라이브러리 설치(openpyxl, flask,또 뭐있었는지 기억안남 그냥 실행해보고 깔으라는거 깔으셈)

2. 2. 카카오채널 설정
	1. 카카오 디벨로퍼 신청
	https://business.kakao.com/dashboard/
	여기 접속해보고 만약 무슨 신청이 필요하다고 하면 하면됨, 하루이틀 기다리면 권한을 줌
	2. 카카오채널 생성
	폰에서 카카오채널 앱을 깔고 채널을 개설해야함 (기존의 채널에 관리자로 추가해 줄테니 이거 할때 나한테 연락하셈)
	3. 카카오디벨로퍼에서 챗봇 생성 (기존에 만들어둔 챗봇 권한을 줄 수 있으니 이거할때 나한테 연락하셈)
	4. (만약 챗봇을 새로 만든다면) 챗봇을 생성했으면, 시나리오 로 가서 기본으로 있는 것들 모두 삭제
	5. 웰컴블록은 처음 챗봇을 친추한 사람들에게 가는 메세지임. 처음 등록할때 등록하는 양식을 적어두면 됨
	6. 스킬 로 가서 새로운 스킬을 추가하고 URL을 http://[서버ip]:5050 으로 설정
	7. 시나리오에서 풀벡블록에서 봇응답을 스킬데이터 사용으로 설정
	8. 설정 으로 가서 카카오채널과 연결
	9. 배포 로 가서 배포

3. 챗봇 실행법
준비과정을 모두 마쳤으면, 이제 서버에서 파일을 실행하면됨. 실행해야할 파일은 두가지
sudo screen 을 입력해서 스크린 열기(반드시 sudo 붙여야함)
cd [파일이름] 을 입력해서 서버파일로 이동
ctrl+a 누르고 이어서 S(shfit+s) 을 두번 입력해서 창 3개 만들기
0번 창에서
python3 kakao_server.py 로 서버 실행
ctrl+a 누르고 이어서 tab 을 입력해서 창 이동
ctrl+a 누르고 이어서 c 을 입력해서 창 열기
python3 http_server.py	
ctrl+a 누르고 이어서 tab 을 입력해서 창 이동
ctrl+a 누르고 이어서 c 을 입력해서 창 열기
새창에서 파일 모니터링 등등 작업 가능
다 끝나면
ctrl+a 누르고 이어서 d 을 입력해서 screen 나오기

서버 점검시
서버 접속후
sudo screen -r
ctrl+a 누르고 이어서 S(shfit+s) 을 두번 입력해서 창 3개 만들기
맨위에서 ctrl+a 누르고 이어서 0
ctrl+a 누르고 이어서 tab 을 입력해서 중간 창으로 이동
ctrl+a 누르고 이어서 1
ctrl+a 누르고 이어서 tab 을 입력해서 맨 아래 창으로 이동
ctrl+a 누르고 이어서 2
이렇게하면 위에서부터 kakao_server.py http_server.py 모니터링창

##screen 종료방법
screen에서 나온 상태에서
screen -r 실행중인 스크린이 하나면 그걸로 이동
screen -ls 실행중인 스크린의 리스트
kill [숫자] 해당 스크린 종료
sudo로 실행시켰을 경우
sudo screen -r, sudo screen -ls, sudo kill [숫자]

4. 에러 해결법
##
대부분의 에러는 한번에 많은 사용자가 몰렸을 때 'name_id.xlsx' 파일이 깨지면서 발생함.
심한경우에는 name_id.xlsx 파일이 깨진 상황에서 입력이 계속오면 서버가 아예 먹통이 되어버리기도함.
이 경우에는 name_id.xlsx파일만 고치면 해결되며, 진행중이던 신청의 내용은 문제없이 저장되어있음.
두가지 경우로 나눠서 설명하겠음
>name_id.xlsx 파일만 깨진 경우
sftp로 서버에서 name_id.xlsx 파일을 다운로드 받아서 열어보면 에러로 인해서 열지 못한다고 하면서 복구를 시도한다고함. 이때 복구가 된 경우 저장하고 파일을 다시 서버로 전송해서 덮어쓰면 해결됨. 복구가 되지 않는 경우 백업해 뒀던 name_id.xlsx 파일을 서버로 전송해서 덮어쓰기 해야함. 이때 백업된 파일이 오래된 파잃일 경우, 그 이후 새로 등록한 사람은 다시 등록해야하며, 사용자들의 상태가 모두 백업된 시점으로 돌아가서 초반에 많은 불편함이 있을 수 있음. 예를 들어 신청을 하고 있던 사용자는 영문도 모른채 신청이 종료되고 다시 신청을 처음부터 해야함. 이 문제를 고치기 전까지는 주기적으로 백업하는 것을 추천함.
>서버가 다운된 경우
AWS에 접속해서 서버를 중단(*종료하면 안됨, 종료하면 아예 인스턴스가 삭제됨) 후 중단될 때까지 5분정도 기다렸다가 다시 시작해야함. 시작후 kakao_server.py와 http_server.py를 다시 실행시켜야함(3. 챗봇 실행법 참고)
(중요) 이때 서버의 IP가 변경됨. 따라서 카카오디벨로퍼 챗봇 설정에서 스킬의 연결 IP주소를 수정하고 저장 후 배포해야함.
또한 kakao_server.py 파일에서 다운로드코드 명령어의 답장메시지에서 ip주소를 변경해야 관리자들이 파일을 다운받을 수 있음

##
아주 가끔씩 신청내역을 저장한 파일이 고장나는 경우가 있음. (대부분 신청생성 초기에 발생하며, 원인은 모르겠음)
이 경우에는 sftp를 통해 해당 파일을 다운받고, 복구를 시도해야함. 복구되지 않는경우 답이 없음. 처음부터 다시 신청하라고 해야함.

5. 개선방향
행정이를 처음 만들기 시작한게 20년 여름방학이였고 지금의 버전으로 거의 완성한게 20년 10월 정도였답니다. 지금 22년 2월에 이 글을 쓰면서 코드를 다시 읽어보고 있는데 진짜 처첨하도록 못만든거 같아요.ㅎㅎ 코딩을 학교와서 처음 배웠고, 컴퓨터과학과도 아닌 전자과 생도가 혼자 독학해서 만든 코드라서 그런거니까 너그럽게 봐주셨으면 좋겠네요.. 다음의 내용들은 20년 10월부터 22년까지 1년이 조금 넘는 기간 동안 사용하면서 생각났던 개선방향들입니다. 몇가지는 생각만 했었던 것들이고 몇가지는 시도해봤는데 능력이 부족해서 반영하지 못한 것들입니다. 부디 훌룡한 후배들이 해결해줬으면 좋겠네요.

## 로깅 시스템
운용 초반에는 에러가 굉장히 많았는데 매번 서버가 터져서 왜 에러가 난건지 알 수 없었답니다. 그래서 서버 SSH화면을 계속 지켜보고 있었던 적도 있답니다. 이런 일들을 방지하기 위해서는 로깅시스템이 꼭 필요할 거 같아요. 파이썬 logging 라이브러리를 사용하거나 제가 참고용 폴더에 넣어둔 logs.py 파일을 참고해서 로깅 시스템을 구축하면 좋을 거 같아요.

## db시스템으로의 전환
제가 db를 다룰줄 몰라서 openpyxl 라이브러리를 통해서 모든 데이터를 엑셀에 저장했는데요, db를 쓰면 더욱 안정적일거라고 생각합니다. 박준수 생도는 실제로 이를 구현하려고 했었고, 거의 완성했었는데 데이터베이스의 안정성은 모르겠고, 그냥 챗봇 시스템의 안정성이 너무 떨어져서(예외처리들이 잘 안되었음) 사용하지 못했습니다. 잘 분석해보면 얻을게 있을거 같아요.

## 주기적 자동 백업
주기적으로 파일들을 자동으로 백업해두는 시스템을 만들면 좋을 거 같아요

## 한번에 하나의 메시지만 처리 가능한 문제 해결
지금의 방식은 메세지가 들어오면 그걸 다 처리하기 전까지는 다른 메시지 처리를 시작할 수 없어서 많은 사람이 몰렸을 때 감당이 안되고 있음. 이걸 해결할 수 있으면 좋을 것 같아요
